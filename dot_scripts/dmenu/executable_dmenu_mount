#!/usr/bin/python3
#    _____ _     ____  ____  ____  ____  _____
#   /    // \   /  _ \/  __\/  _ \/  __\/__ __\
#   |  __\| |   | / \||  \/|| / \||  \/|  / \
#   | |   | |_/\| |-|||  __/| \_/||    /  | |
#   \_/   \____/\_/ \|\_/   \____/\_/\_\  \_/
#

# imports
import os
import sys
import json
import shutil
import argparse
import warnings
import subprocess

# dependencies:
# lsblk
# findmnt

# globals
MOUNTPOINTS = {}

# warning messages
def notify(title, message=None):
    if message is None:
        message=""
    subprocess.check_output(["notify-send", title, message])


def warn(message):
    warnings.warn(message)
    notify("dmenu_mount [warning]", message)


# askpass and sudo-askpass dialogs
ASKPASS = os.environ.get("SUDO_ASKPASS", "")
if not ASKPASS:
    raise RuntimeError("No $SUDO_ASKPASS environment variable found")
ASKUSERPASS = os.environ.get("SUDO_ASKUSERPASS", "")
if not ASKUSERPASS:
    raise RuntimeError("No $SUDO_ASKUSERPASS environment variable found")


def askpass(prompt):
    password = subprocess.check_output([ASKPASS, prompt])[:-1].decode()
    return password


def askuserpass(prompt):
    username, password = (
        subprocess.check_output([ASKUSERPASS, prompt]).decode()[:-1].split("\n")
    )
    return username, password


# Device


class Device:
    def __init__(self, **kwargs):
        kwargs["label"] = kwargs.get("label") or ""
        self.__dict__.update(kwargs)
        if hasattr(self, "mountpoint") and self.mountpoint:
            self.mountpoint = os.path.abspath(os.path.expanduser(self.mountpoint))
            MOUNTPOINTS[self.mountpoint] = self
        else:
            self.mountpoint = ""

    def __repr__(self):
        line = (
            lambda s, l: s[: l - 5] + "...  " if len(s) > l else s + " " * (l - len(s))
        )
        s = ""
        if self.mountpoint:
            s += line(self.mountpoint, 30)
            s += line(self.name, 30)
            return s
        s += line(self.name, 15)
        s += line(self.size, 12)
        s += line(self.fstype, 10)
        if hasattr(self, "uuid") and self.uuid:
            s += line(self.uuid, 15)
        s += line(self.label, 10)
        return s

    def __eq__(self, other):
        return (isinstance(other, Device) and self.uuid == other.uuid) or (
            str(self) == str(other)
        )


# functions


def dmenu(list_in, prompt=""):
    dmenu_in = subprocess.Popen(
        ["echo", "\n".join([str(s) for s in list_in])], stdout=subprocess.PIPE
    ).stdout
    prompt = [] if not prompt else ["-p", prompt]
    try:
        choice = subprocess.check_output(
                ["dmenu"] + prompt + sys.argv[1:], stdin=dmenu_in
        ).decode()[:-1]
    except subprocess.CalledProcessError:
        raise RuntimeError("no drive was selected")
    return choice


def find_devices_to_mount():
    lsblk1 = json.loads(subprocess.check_output(["lsblk", "-J", "-l"]).decode())[
        "blockdevices"
    ]
    lsblk2 = json.loads(subprocess.check_output(["lsblk", "-J", "-l", "-f"]).decode())[
        "blockdevices"
    ]
    devices = {}
    for dic1, dic2 in zip(lsblk1, lsblk2):
        device = {**dic1, **dic2}
        name = device["name"] = "/dev/" + device["name"]
        fstype = device["fstype"]
        if "loop" not in name and fstype not in [None, "swap"] and not device["mountpoint"] and not device["type"] == "disk":
            device = Device(**device)
            devices[str(device)] = device
    return devices

def find_devices_to_unmount():
    parents = json.loads(subprocess.check_output(["findmnt", "--real", "-J"]).decode())["filesystems"]
    mounted_devices = [dev for dev in parents if dev["target"] == "/"][0]["children"]
    mounted_devices += [dev for dev in mounted_devices if dev["target"] == "/home"][0].pop("children", [])
    devices = {}
    for dic in mounted_devices:
        device = Device(mountpoint=dic["target"], name=dic["source"], fstype=dic["fstype"])
        if "loop" not in device.name:
            devices[str(device)] = device
            print(device)
    return devices

def parse_device_line(line):
    """ this is only called when the device line is not found in lsblk"""
    if line.startswith("//"):
        return Device(name=line.strip(), fstype="cifs")
    elif line.startswith("/"):
        return Device(name=line.strip(), fstype="ext") # mounting a folder in another one
    else:
        return Device(name=line.strip(), fstype="ssh")


def mount(device: Device, directory: str):
    directory = os.path.abspath(os.path.expanduser(directory))
    if os.path.exists(directory):
        if os.listdir(directory):
            raise RuntimeError(f"directory {directory} not empty")
        if directory in MOUNTPOINTS:
            raise RuntimeError(f"device {MOUNTPOINTS[directory].name} is mounted here.")
    else:
        os.makedirs(directory)
    try:
        func = {
            "ext2": _mount_ext,
            "ext3": _mount_ext,
            "ext4": _mount_ext,
            "vfat": _mount_vfat,
            "exfat": _mount_exfat,
            "ntfs": _mount_ntfs,
            "cifs": _mount_cifs,
            "ssh": _mount_ssh,
        }[device.fstype]
    except KeyError:
        raise RuntimeError(f"No recipe for mounting {device.fstype} format.")
    return func(device, directory)

def unmount(device: Device):
    if not device.mountpoint:
        raise RuntimeError(f"Device {device.name} is not mounted")
    msg = subprocess.check_output(["sudo", "-A", "umount", device.mountpoint])
    if os.path.isdir(device.mountpoint) and not os.listdir(device.mountpoint):
        shutil.rmtree(device.mountpoint)
    return msg


def _mount_ext(device: Device, directory: str):
    options = "defaults,nofail,x-systemd.device-timeout=1s"
    msg = subprocess.check_output(
        ["sudo", "-A", "mount", f"{device.name}", directory, "--options", options]
    )
    return msg


def _mount_vfat(device: Device, directory: str):
    options = ("defaults,nofail,x-systemd.device-timeout=1s,"
              f"uid={os.getuid()},gid={os.getgid()},dmask=033,umask=033")
    msg = subprocess.check_output(
        ["sudo", "-A", "mount", f"{device.name}", directory, "--options", options]
    )
    return msg

def _mount_exfat(device: Device, directory: str):
    options = ("defaults,nofail,x-systemd.device-timeout=1s,"
              f"uid={os.getuid()},gid={os.getgid()},dmask=033,umask=033")
    msg = subprocess.check_output(
        ["sudo", "-A", "mount", "-t", "exfat", f"{device.name}", directory, "--options", options]
    )
    return msg


def _mount_ntfs(device: Device, directory: str):
    options = (
        "defaults,nofail,x-systemd.device-timeout=1s,"
        f"uid={os.getuid()},gid={os.getgid()},dmask=033,umask=033"
    )
    msg = subprocess.check_output(
        ["sudo", "-A", "mount", f"{device.name}", directory, "--options", options]
    )
    return msg


def _mount_cifs(device: Device, directory: str):
    username, password = askuserpass(f"username and password for {device.name} [cifs]")
    options = (
        "defaults,nofail,x-systemd.device-timeout=1s,"
        f"uid={os.getuid()},gid={os.getgid()},dir_mode=0744,file_mode=0744,"
        f"username={username},password={password}"
    )
    msg = subprocess.check_output(
        ["sudo", "-A", "mount", f"{device.name}", directory, "--options", options]
    )
    return msg


def _mount_ssh(device: Device, directory: str):
    username, password = askuserpass(f"username and password for {device.name} [sshfs]")
    if ":" not in device.name:
        device.name = device.name + f":/home/{username}"
    password_out = subprocess.Popen(["echo", password], stdout=subprocess.PIPE).stdout
    msg = subprocess.check_output( # no sudo!
        [
            "sshfs",
            "-o",
            "password_stdin",
            f"{username}@{device.name}",
            directory,
        ],
        stdin=password_out,
    )
    return msg

def mountpoint_options(device):
    options = []
    if device.label:
        options.append(f"/mnt/{device.label}")
        options.append(f"~/{device.label}")
    if "/" in device.name:
        options.append(f"/mnt/{device.name.split('/')[-1]}")
        options.append(f"~/{device.name.split('/')[-1]}")
    if ":" in device.name:
        options.append(f"/mnt/{device.name.split(':')[0]}")
        options.append(f"~/{device.name.split(':')[0]}")
    if hasattr(device, "uuid") and device.uuid:
        if "-" in device.uuid:
            options.append(f"/mnt/{device.uuid.split('-')[0]}")
            options.append(f"~/{device.uuid.split('-')[0]}")
        else:
            options.append(f"/mnt/{device.uuid}")
            options.append(f"~/{device.uuid}")
    options.append(f"/mnt")
    max_length = max(len(opt) for opt in options)
    max_length = max(max_length, 100)
    options = sorted([opt+" "*(max_length-len(opt)) for opt in options])
    options = ["~/usb"] + [opt for opt in options if opt.startswith("~")] + [opt for opt in options if not opt.startswith("~")]
    return options


# main program
if __name__ == "__main__":
    try:
        _ = sys.argv.pop(0)
        mode = sys.argv.pop(0)
    except:
        print("Usage: dmenu_mount [mount|unmount]")
        exit(1)

#    try:
    if mode == "mount":
        devices = find_devices_to_mount()
    else:
        devices = find_devices_to_unmount()
    device_line = dmenu(devices.values(), f"{mode}")
    chosen_device = devices.get(device_line) or parse_device_line(device_line)
    if not chosen_device.name:
        print("no device chosen")
        exit(1)
    if mode == "mount":
        chosen_directory = os.path.abspath(os.path.expanduser(dmenu(mountpoint_options(chosen_device), "mount-in").strip()))
        msg = mount(chosen_device, chosen_directory)
    if mode == "unmount":
        msg = unmount(chosen_device)

    notify(f"{mode} success", msg)
    print(f"{mode} success")
    if msg:
        print(str(msg))
#    except Exception as e:
#        print(e)
#        notify(f"{mode} failed", str(e))

